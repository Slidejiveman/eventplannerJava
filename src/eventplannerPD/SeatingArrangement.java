package eventplannerPD;

/**
 * The seating arrangement is a table of guests assigned to tables at the event. The guests at the tables should only be those who they are required to set with or who they are indifferent about. A guest should never be seated at a table with another guest they should avoid.
 * 
 * The primary reports generated by this system are based on the seating arrangements of the guests. One report will show the guest table assignments alphabetically and another will show them by table number.
 */
public class SeatingArrangement {

    /**
     * The  unique identifier for a seating arrangement. These will be used to ensure that the database provides a unique row in the seating arrangement table for each arrangement.
     */
    private Integer id;
    /**
     * The event the seating arrangement is associated with.
     */
    private Event event;

    public Integer getId() {
        return this.id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Event getEvent() {
        return this.event;
    }

    public void setEvent(Event event) {
        this.event = event;
    }

    /**
     * The default constructor for a seating arrangement. This is required for JPA persistence.
     */
    public SeatingArrangement() {
        // TODO - implement SeatingArrangement.SeatingArrangement
        throw new UnsupportedOperationException();
    }

    /**
     * The seating arrangement may be deleted if the event is in the Open or Canceled state. Otherwise, the seating arrangement is under review or has been approved. It cannot be deleted after that.
     * @return True: It is okay to delete the seating arrangement.
     * False: It is not okay to delete the seating arrangement.
     */
    public boolean isOkToDelete() {
        // TODO - implement SeatingArrangement.isOkToDelete
        throw new UnsupportedOperationException();
    }

    /**
     * Sorts the guests with their seats by guest name alphabetically.
     * This output can then be printed using iTxtPDF.
     */
    public void sortAlphabetically() {
        // TODO - implement SeatingArrangement.sortAlphabetically
        throw new UnsupportedOperationException();
    }

    /**
     * Sorts the seating arrangement by table number. The result can then be printed with iTxtPDF.
     */
    public void sortByTableNumber() {
        // TODO - implement SeatingArrangement.sortByTableNumber
        throw new UnsupportedOperationException();
    }

}